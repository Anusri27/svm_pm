#idhar se chahiye
# df= pd.read_csv('ce_dt.csv')
#
# df['time']=pd.to_datetime(df['time'])
# df['temperature']=pd.to_numeric(df['temperature'],errors='coerce')
# df['z-axis velocity']=pd.to_numeric(df['z-axis velocity'],errors='coerce')
# df=df.interpolate(method='linear', axis=0).ffill().bfill()
# print(df.head())
# print(df.info())
# data=df[['time','temperature','x-axis velocity','z-axis velocity']]

# not necessary

# good_zv=data[data['z-axis velocity']<2.8]
# unsatisfactory_zv=data[(data['z-axis velocity']>=7.1 ) & (data['z-axis velocity']<18 )]
# satisfactory_zv=data[(data['z-axis velocity']>=2.8 ) & (data['z-axis velocity']<7.1 )]
# unacceptable_zv=data[data['z-axis velocity']>=18]
# m=good_zv['time']
# n=satisfactory_zv['time']
# o=unsatisfactory_zv['time']
# p=unacceptable_zv['time']
# a=good_zv['z-axis velocity']
# b=satisfactory_zv['z-axis velocity']
# c=unsatisfactory_zv['z-axis velocity']
# d=unacceptable_zv['z-axis velocity']
# good_xv=data[data['x-axis velocity']<2.8]
# satisfactory_xv=data[(data['x-axis velocity']>=2.8 ) & (data['x-axis velocity']<7.1 )]
# unsatisfactory_xv=data[(data['x-axis velocity']>=7.1 ) & (data['x-axis velocity']<18 )]
# unacceptable_xv=data[data['x-axis velocity']>=18]
# q=good_xv['time']
# w=satisfactory_xv['time']
# e=unsatisfactory_xv['time']
# r=unacceptable_xv['time']
# u=good_xv['x-axis velocity']
# v=satisfactory_xv['x-axis velocity']
# y=unsatisfactory_xv['x-axis velocity']
# z=unacceptable_xv['x-axis velocity']
# acceptable_temp=data[data['temperature']<50]
# unacceptable_temp=data[data['temperature']>=50]
# g=acceptable_temp['time']
# h=unacceptable_temp['time']
# i=acceptable_temp['temperature']
# j=unacceptable_temp['temperature']

#wapas idhar se needed

# cols = list(data)[1:6]
# X= data[cols[1:]]
# Y=data[cols[0]]
# train_dates =data['time']
# forecast_period_dates = pd.date_range(list(train_dates)[-1], periods=17280, freq='5s').tolist()
# future = pd.DataFrame(forecast_period_dates)
# future.columns = ['time']
# future['time']= pd.to_datetime(future['time'])
# datess=pd.DataFrame(forecast_period_dates)
