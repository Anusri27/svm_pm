# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FmT8M-5bILyJ7rO5hKSfLQ7Gj8GolfDE
"""

import numpy as np
import tensorflow as tf
import os
import pandas as pd
from matplotlib import pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

path = r"/content/drive/My Drive/VCS"

dpath=os.listdir(path)
dpath

dirname =[]
for i in range(0,len(dpath)):
  dirname.append(path + '/' + dpath[i])
dirname

df= pd.read_csv(dirname[1])

df

df.info()

df['temperature']=pd.to_numeric(df['temperature'],errors='coerce')
df['z-axis velocity']=pd.to_numeric(df['z-axis velocity'],errors='coerce')

df['temperature']

df['z-axis velocity']

df=df.interpolate(method='linear', axis=0).ffill().bfill()
df

df.infer_objects().dtypes

df.head()

df['time']=pd.to_datetime(df['time'])

data=df[['time','temperature','x-axis velocity','z-axis velocity']]

train_dates =data['time']

cols = list(data)[1:6]
cols

X= data[cols[1:]]
y=data[cols[0]]

X

y

from sklearn.svm import SVC
from sklearn.model_selection import train_test_split 
import numpy as np
from sklearn import linear_model
from sklearn import svm

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3, random_state=0)

clf = svm.SVR()
clf.fit(X_train, y_train)

import pickle
pickle.dump(clf, open('model.pkl','wb'))

model = pickle.load(open('model.pkl','rb'))

y_pred_test = clf.predict(X_test)

y_pred_test

acc_outside = (sum((y_test - y_pred_test)) / len(y_test)) * 100

from sklearn.metrics import mean_absolute_error
print(mean_absolute_error(y_test, y_pred_test))

from sklearn.metrics import mean_squared_error

import math
print((mean_squared_error(y_test, y_pred_test)))

vals = pd.DataFrame(y_pred_test)

X_test

y_test

vals

forecast_period_dates = pd.date_range(list(train_dates)[-1], periods=17280, freq='5s').tolist()
forecast_period_dates

future = pd.DataFrame(forecast_period_dates)

future.columns = ['time']
future['time']= pd.to_datetime(future['time'])

forecast = clf.predict(X[-17280:])

forecast

fo=pd.DataFrame(forecast)

print(fo)

df_forecast = pd.DataFrame({'Time':np.array(forecast_period_dates), 'Predictions':np.array(forecast)})
df_forecast['Time']=pd.to_datetime(df_forecast['Time'])

df_forecast

